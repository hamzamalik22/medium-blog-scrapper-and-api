url,title,subtitle,content,author,author_url,claps,reading_time,images
https://medium.com/javascript-scene/top-javascript-frameworks-and-topics-to-learn-in-2019-b4142f38df20?source=tag_archive---------0-----------------------,Top JavaScript Frameworks and Topics to Learn in 2019,Prediction: React Continues to Dominate in 2019,"Sign up Sign in Sign up Sign in Eric Elliott Follow JavaScript Scene -- 36 Listen Share It’s that time of year again: The annual overview of the JavaScript tech ecosystem. Our aim is to highlight the learning topics and technologies with the highest potential job ROI. What are people using in the workforce? What do the trends look like? We’re not attempting to pick what’s best, but instead using a data-driven approach to help you focus on what might actually help you land a job when the interviewer asks you, “do you know __(fill in the blank)__?” We’re not going to look at which ones are the fastest, or which ones have the best code quality. We’ll assume they’re all speed demons and they’re all good enough to get the job done. The focus is on one thing: What’s actually being used at scale? The big question we’ll look at is the current state of component frameworks, and we’re going to focus primarily on the big three: React, Angular, and Vue.js, primarily because they have all broken far ahead of the rest of the pack in terms of workplace adoption. Last year I noted how fast Vue.js was growing and mentioned it might catch Angular in 2018. That didn’t happen, but it’s still growing very quickly. I also predicted it would have a much harder time converting React users because React has a much stronger user satisfaction rate than Angular — React users simply don’t have a compelling reason to switch. That played out as expected in 2018. React kept a firm grip on its lead in 2018. Interestingly, all three frameworks are still growing exponentially, year over year. Prediction: React Continues to Dominate in 2019 React still hasmuch higher satisfaction ratings than Angularfor the third year we’ve been tracking it, and it’s not giving up any ground to challengers. I don’t currently see anything that could challenge it in 2019. Unless something crazy big comes along and disrupts it, React will be the framework to beat again at the end of 2019. Speaking of React, it just keeps getting better. The newReact hooks APIreplaced theclassAPI I’ve been merely tolerating since React 0.14. (TheclassAPI still works, but the hooks API is reallymuch better). React’s great API improvements, like better support for code splitting and concurrent rendering (seedetails), are going to make it really hard to beat in 2019. React is now without a doubt, the most developer friendly front-end framework in the space. I couldn’t recommend it more. Data Sources We’ll look at a handful of key pieces of data to gauge interest and use in the industry: Google Search Trends React overtook Angular in the search trends in January 2018, and held its lead through the end of the year. Vue.js now holds a visible position on the graph, but still small factor in the search trends. For comparison: last year’s graph: Package Downloads Package downloads give us a fair indication of what’s actually being used, because developers frequently download the packages they need while they’re working. Overly-clever readers will note that sometimes they download these things from their internal corporate package repos, to which I answer, “why yes, that does happen — to all three frameworks.” All of them have established a foothold in the enterprise, and I’m confident in the averaging power of this data at scale. React Monthly Downloads: 2014–2018 Angular Monthly Downloads: 2014–2018 Vue Monthly Downloads: 2014–2018 Let’s look at a quick visual comparison of the share of downloads: “But you’re forgetting all about Angular 1.0! It’s still huge in the enterprise.” No, I’m not. Angular 1.0 is still used a lot in the enterprise in the same way that Windows XP is still used a lot in the enterprise. It’s definitely out there in enough numbers to notice, but the new versions have long since dwarfed it to the point that it’s now less significant than the other frameworks. Why? Because the software industry at large, and over-all use of JavaScriptacross all sectors (including the enterprise)is growing so fast that new installs quickly dwarf old installs, even if the legacy appsnever upgrade. For evidence, just take another look at those download charts. More downloads in 2018 than in the previous yearscombined. Job Board Postings Indeed.com aggregates job postings from a variety of job boards. Every year,we tally the job postings¹mentioning each framework to give you a better idea of what people are hiring for. Here’s what it looks like this year: Again, a lot more total jobs this year than the previous year. I dropped Ember because it’s clearly not growing at the rate that everything else is. I wouldn’t recommend learning it to prepare for a future job placement. jQuery and Ember jobs didn’t change much, but everything else grew a lot. Thankfully, the number of new people joining the software engineering field has grown a lot as well in 2018, but we need to continue to hire and train junior developers (meaning we needqualified senior developers to mentor them), or we won’t keep pace with the explosive job growth. For comparison, here’s last year’s chart: Average salary climbed again in 2018, from $110k/year to $111k/year. Anecdotally, the salary listings are lagging new hire expectations, and hiring managers will struggle to hire and retain developers if they don’t adjust for the developer’s market and offer larger pay increases. Retention and poaching continues to be a huge problem in 2018 as employees jump ship for higher paying jobs, elsewhere. I say it every year: Focus on the fundamentals. This year you’re getting some extra help. All software development is composition: The act of breaking down complex problems into smaller problems, and composing solutions to those smaller problems to form your application. But when I ask JavaScript interviewees the most fundamental questions in software engineering, “what is function composition?” and “what is object composition?” they almost invariably can’t answer the questions, even though they do them every day. I have long thought this was a very serious problem that needs to be addressed, so I wrote a book on the topic:“Composing Software”. If you learn nothing else in 2019, learn how to compose software well. If you learn nothing else in 2019, learn how to compose software well. On TypeScript TypeScript continued to grow in 2018, and it continues to be overrated becausetype safety does not appear to be a real thing(does not appear to reduce production bug density by much), andtype inferencein JavaScript without TypeScript’s help is really quite good. You can even use the TypeScript engine to get type inference in normal JavaScript using Visual Studio Code. Or install the Tern.js plugins for your favorite editor. TypeScript continues to fall flat on its face for most higher order functions. Maybe I just don’t know how to use it correctly (after years living with it on a regular basis — in which case, they really need to improve usability, documentation, or both), but I still don’t know how to properly type the map operation in TypeScript, and it seems to be oblivious to anything going on in atransducer. It fails to catch errors, and frequently complains about errors that aren’t really errors at all. It just isn’t flexible or full featured enough to support how I think about software. But I’m still holding out hope that one day it will add the features we need, because as much as its shortcomings frustrate me while trying to use it for real projects, I also love the potential of being able to properly (and selectively) type things when it’s really useful. My current rating: Very cool in very select, restricted use-cases, but overrated, clumsy, and very low ROI for large production apps. Which is ironic, because TypeScript bills itself as “JavaScript that scales”. Perhaps they should add a word: “JavaScript that scales awkwardly.” What we need for JavaScript is a type system modeled more after Haskell’s, and less after Java’s. Other JavaScript Tech to Learn Last year I predicted that blockchain and fin-tech would be big technologies to watch in 2018. That prediction was spot on. One of the major themes of 2017–2018 was the rise of crypto and building the foundations ofthe internet of value.Remember that phrase. You’re going to hear it a lot, soon. If you’re like me and you’ve been following decentralized apps since the P2P explosion, this has been a long time coming. Now that Bitcoin lit the fuse and showed how decentralized apps can be self-sustaining using cryptocurrencies, the explosion is unstoppable. Bitcoin has grown several orders of magnitude in just a few years. You may have heard that 2018 was a “crypto winter”, and got the idea that the crypto industry is in some sort of trouble. That’s complete nonsense. What really happened was at the end of 2017, Bitcoin hit another 10x multiple in an epic exponential growth curve, and the market pulled back a bit, which happens every time the Bitcoin market cap grows another 10x. In this chart, each arrow starts at another 10x point, and points to the low point on the price correction. Fundraising for crypto ICOs (Initial Coin Offerings) peaked in early 2018, and the 2017–2018 funding bubble brought a rush of new job openings into the ecosystem, peaking at over 10k open jobs in January 2018. It has since settled back to about 2,400 (according to Indeed.com), but we’re still very early and this party is just getting started. There is a lot more to say about the burgeoning crypto industry, but that’s a whole other blog post. If you’re interested, read“Blockchain Platforms and Tech to Watch in 2019”. Other Tech to Watch As predicted last year, these technologies continued to explode in 2018: AI/Machine Learningis in full swing with 30k open jobs at the close of 2018, deep fakes, incredible generative art, amazing video editing capabilities from the research teams at companies like Adobe — there has never been a more exciting time to explore AI. Progressive Web Applicationsare quickly just becoming how modern web apps are properly built — added features and support from Google, Apple, Microsoft, Amazon, etc. It’s incredible how quickly I’m taking the PWAs on my phone for granted. For example, I don’t have the Twitter Android app installed on my phone anymore. I exclusively usethe Twitter PWA instead. AR(Augmented Reality)VR(Virtual Reality)MR(Mixed Reality) all got together and joined forces like Voltron to becomeXR(eXtended Realty). The future of full-time XR immersion is coming. I’m predicting within 5–10 years for mass adoption of consumer XR glasses. Contact lenses within 20. Thousands of new jobs opened up in 2018, and this industry will continue to explode in 2019. Robotics, Drones, and Autonomous VehiclesAutonomous flying drones are already here, autonomous robots continue to improve, and more autonomous vehicles are sharing the road with us at the end of 2018. These technologies will continue to grow and reshape the world around us through 2019 and into the next 20 years. Quantum Computingprogressed admirably in 2018, as predicted, and as predicted, it did not go mainstream, yet. In fact, my prediction, “it may be 2019 or later before the disruption really starts” was likely very optimistic. Researchers in the crypto space have paid extra attention to quantum-safe encryption algorithms (quantum computing will invalidate lots of today’s assumptions about what is expensive to compute, and crypto relies on things being expensive to compute), but in spite of a constant flood of interesting research progress in 2018, a recent reportputs things into perspective: “Quantum computing has been on Gartner’s hype list 11 times between 2000 and 2017, each time listed in the earliest stage of the hype cycle and each time said to be more than a decade away.” “Quantum computing has been on Gartner’s hype list 11 times between 2000 and 2017, each time listed in the earliest stage of the hype cycle and each time said to be more than a decade away.” This reminds me of early AI efforts, which began to heat up in the 1950’s, had limited but interesting success in the 1980’s and 1990’s, but only just started getting really mind-blowing circa 2010. Eric Elliottis the author of the books,“Composing Software”and“Programming JavaScript Applications”. As co-founder ofEricElliottJS.comandDevAnywhere.io, he teaches developers essential software development skills. He builds and advises development teams for crypto projects, and has contributed to software experiences forAdobe Systems, Zumba Fitness,The Wall StreetJournal,ESPN,BBC,and top recording artists includingUsher, Frank Ocean, Metallica,and many more. He enjoys a remote lifestyle with the most beautiful woman in the world. -- -- 36 Published inJavaScript Scene JavaScript, software leadership, software development, and related technologies. Written byEric Elliott Make some magic. #JavaScript Responses (36) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Eric Elliott,https://me.dm/@ericelliott,5814,10 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/1*VZfJFJj5oVmZ5WzlrgSmRg.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*fegbK6HDD8crwrwARuMhaQ.png|https://miro.medium.com/v2/resize:fill:96:96/1*fegbK6HDD8crwrwARuMhaQ.png|https://miro.medium.com/v2/resize:fill:128:128/1*fegbK6HDD8crwrwARuMhaQ.png|https://miro.medium.com/v2/resize:fill:96:96/1*VZfJFJj5oVmZ5WzlrgSmRg.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*VZfJFJj5oVmZ5WzlrgSmRg.jpeg
https://medium.com/job-advice-for-software-engineers/what-i-want-and-dont-want-to-see-on-your-software-engineering-resume-cbc07913f7f6?source=tag_archive---------1-----------------------,What I want (and don’t want) to see on your software engineering resume,Job Advice for Software Engineers,"Sign up Sign in Sign up Sign in Job Advice for Software Engineers Home About  Thoughts and advice from James S. Fisher. (Cover image by rawpixel on Unsplash)  Member-only story James S. Fisher Follow Job Advice for Software Engineers -- 25 Share Asking what should be on a resume is one of the most common questions I hear. I’ve seen thousands of resumes, interviewed hundreds, and hired or helped hire dozens, so I’ll describe exactly what I’m looking for when I’m presented with your application. Resume or CV? In the US, documents describing your qualifications and work history are called résumés. In the EU and elsewhere known as a curriculum vitae, or CV. Either way, the purpose is the same: a relatively short document which summarizes your skills, work history, education, contact information, and anything else that can be used to estimate your “fit” for a given position. I’m based in the US, so I’ll give a US-centric view of resumes, but I’ll attempt to point out differences with CVs in areas in which I’m familiar. Why do I need one? A resume is required as part of almost every job application. If you see a job listing online and click “Apply,” the next page will almost certainly ask you for your contact information and a resume file. Yes, getting a job is a highly-subjective process that involves interviewing and negotiation, but providing an employer with a resume is the standard first step before any of that can happen. -- -- 25 Published inJob Advice for Software Engineers Thoughts and advice from James S. Fisher. (Cover image by rawpixel on Unsplash) Written byJames S. Fisher Software engineer, manager, and executive in San Francisco, CA. Over 12 years in Silicon Valley tech. Responses (25) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",James S. Fisher,https://medium.com/@jamessfisher?source=post_page---byline--cbc07913f7f6---------------------------------------,5366,8 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:76:76/1*nkBuRCdTelH1W-bXGqT-lg.jpeg|https://miro.medium.com/v2/resize:fill:88:88/1*o8Ngh0ZvDFTZJraH3EWcjA.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*nkBuRCdTelH1W-bXGqT-lg.jpeg|https://miro.medium.com/v2/resize:fill:96:96/1*nkBuRCdTelH1W-bXGqT-lg.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*nkBuRCdTelH1W-bXGqT-lg.jpeg|https://miro.medium.com/v2/resize:fill:96:96/1*o8Ngh0ZvDFTZJraH3EWcjA.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*o8Ngh0ZvDFTZJraH3EWcjA.jpeg
https://itnext.io/load-testing-using-apache-jmeter-af189dd6f805?source=tag_archive---------2-----------------------,Load Testing Using Apache JMeter,Published inITNEXT,"Sign up Sign in Sign up Sign in Mitesh Follow ITNEXT -- 1 Listen Share Load testing is the process of putting the load through (HTTP, HTTPS, WebSocket etc) calls on any software system to determine its behavior under normal and high load conditions. Load test helps identify maximum requests a software system can handle. It helps determine the point of a bottleneck due to which application starts degrading performance. Load testing is effective when we simulate real user scenario. We need to know how our users behave on our application. Try to replicate their behavior using different API calls and generate load through many concurrent requests at our application for an extended period of time to understand application behavior changes. When we generate load on the system beyond normal usage (high load) to understand application/system behavior, we call it stress testing. Stress testing is done to know the limits of an overall system, understand kind of errors thrown during such load and how the end user is affected. This helps in planning for events when a much higher load is expected by provisioning more infrastructure or optimizing applications. We can useApache JMeterfor load testing static as well as dynamic resources which can generate concurrent users to simulate real user scenario. It also provides graphical analyses of test reports. It is written in Java, so we need to have java runtime installed to run Jmeter. As perJMeter website, it is defined as mentioned below : The Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions. The Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions. InstallJMeteron your system from where you want to run your test. I am using Mac OS for running Jmeter and using brew to install JMeter. We first need to check file descriptors we can open on our system using below command. Every OS has limits on active file descriptors. Every TCP connection takes a file descriptor, so we need to make sure we have enough file descriptor (can set between 1–65535) to run concurrent requests. To start our load test, we need to start with thread groups. They are the beginning point of any test plan. We can specify the number of users (= number of threads) that we want to simulate concurrently. Set ramp-up time which specifies the amount of time it takes to start all threads. We need to define a number of iterations for each user(thread) in the group. Each thread executes the plan independently from other threads. All elements inside single thread will execute sequentially. We can add samplers and logic controllers in a thread group. Samplers help send a request to a server and wait for response i.e. HTTP request sampler to send HTTP request and get the response. Logic controllers help customize the logic to decide when to send a request, modify request etc. Listeners are another type of element which we can add in a thread group. They provide access to information about our load test. Graph result listener helps plot results of our test. View result tree listener shows the detail of request and response. We can add pre-processor and post-processor to a sampler request. Pre-processor executes defined action before sample request and post-processor executes defined action after sample request. Pre-processor can be used to generate dynamic parameters different for each request and post-processor to fetch response parameters to be used by other requests. Config elements are used to configure default value for the samplers. Let’s take a real world example where we are going to create a JMeter test plan with a thread group which can run CRUD operations on user resource at a given server. Each “create user” operation needs to have different email address randomly generated before sending the request. Fetch authentication token and user id provided a response to create user request. An authentication token is used as the header in all subsequent requests and user id in URL and body parameter as needed. Finally, have a view result tree listener where we can see all requests with their responses. Step 1: Add a Thread Group to our test plan Step 2: Add an HTTP request defaults using the config elements to define default parameters like hostname and port of server needed for all requests. Step 3: Add an HTTP request sampler to send create user request. Add body to create an HTTP request with a dynamic email parameter which is generated by pre-processor. Step 4: Add a BeanShell pre-processor to generate a random email address for creating user request. Using java code to generate a random number which is used in new email generation for each request. Step 5: Add a JSON extractor post-processor to get authentication token and userId from the response of creating user request. Reading token from JSON response using JSON extractor. Step 6: Add an HTTP header manager to add authentication token as the header to all subsequent requests. Step 7: Add update user, get user and delete user HTTP request sampler for subsequent requests in the same way as creating user HTTP request sampler with userId as dynamic variable fetched from creating user post-processor. Step 8: Add View result tree to get the response to all requests. Finally, we have our user CRUD load test ready which can be used to generate load by increasing the number of users with ramp-up time. This way we can generate different load test plans to know the limits of our applications. The complete code can be found in this git repository:https://github.com/MiteshSharma/JMeterUserLoadTest PS: If you liked the article, please support it with claps👏. Cheers -- -- 1 Published inITNEXT ITNEXT is a platform for IT developers & software engineers to share knowledge, connect, collaborate, learn and experience next-gen technologies. Written byMitesh Responses (1) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Mitesh,https://medium.com/@mitesh_shamra?source=post_page---byline--af189dd6f805---------------------------------------,369,6 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/0*5xu9lN02R-XY-CvD.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*yAqDFIFA5F_NXalOJKz4TA.png|https://miro.medium.com/v2/resize:fill:96:96/1*yAqDFIFA5F_NXalOJKz4TA.png|https://miro.medium.com/v2/resize:fill:128:128/1*yAqDFIFA5F_NXalOJKz4TA.png|https://miro.medium.com/v2/resize:fill:96:96/0*5xu9lN02R-XY-CvD.jpeg|https://miro.medium.com/v2/resize:fill:128:128/0*5xu9lN02R-XY-CvD.jpeg
https://medium.com/s/story/black-mirror-bandersnatch-a-study-guide-c46dfe9156d?source=tag_archive---------3-----------------------,The Illusion of Control in ‘Black Mirror: Bandersnatch’,How the interactive film exposes the absence of free will and choice,"Sign up Sign in Sign up Sign in Member-only story How the interactive film exposes the absence of free will and choice Howard Chai Follow -- 10 Share Black Mirroris a speculative-fiction anthology series created by Charlie Brooker that highlights the dark aspects of modern society, particularly as it relates to our relationship with technology. Each stand-alone episode paints a picture of a world that’s futuristic, yet believable; sleek, yet horrifying. Each of thesestudy guideswill examine the themes of a particular episode. All screencaps are mine. When we first got word that 2018’s entry ofBlack Mirrorwould be “interactive” and a choose-your-own-adventure-style story, I laughed.Black Mirror, with the exception of episodes like “San Junipero”and “Hang the DJ,” is a very pessimistic show. So an episode said to allow you to make choices would undoubtedly be about the illusion of choice, free will, and control. WithBandersnatchnow released, that remains true. Choices and Consequences Right off the bat, the first choice you’re presented with is between two breakfast cereals for Stefan. The second is a choice regarding what music Stefan listens to on the bus to Tuckersoft. They’re obviously small choices, serving more as a tutorial for the rest of the episode, a proof of concept that shows your choices will have material effect. Stefan’s fate is in your hands; you can determine how the story unfolds and ends. -- -- 10 Written byHoward Chai I strive towards a career that ends up leaving me somewhere between Howard Beck and Howard Beale. Responses (10) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Howard Chai,https://medium.com/@howard24/black-mirror-study-guide-hang-the-dj-1aa96d4ee343,2711,8 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/2*116FBaOzxGlXIma5hKkVEQ.jpeg|https://miro.medium.com/v2/resize:fill:96:96/2*116FBaOzxGlXIma5hKkVEQ.jpeg|https://miro.medium.com/v2/resize:fill:128:128/2*116FBaOzxGlXIma5hKkVEQ.jpeg
https://medium.com/fast-company/the-worst-design-crimes-of-2018-56f32b027bb7?source=tag_archive---------4-----------------------,The Worst Design Crimes of 2018,Fast Company,"Sign up Sign in Sign up Sign in Fast Company Home About  Fast Company is the world's leading progressive business media brand, with a unique editorial focus…  Member-only story From tech companies exploiting users to voting ballots that undermined democracy, there was plenty of bad design to choose from Fast Company Follow Fast Company -- 10 Share By Katharine Schwab 2018was a year in which design failed us. Sure, there were some bright spots, but in so many cases, software and hardware design seemed to miss the mark. We learned more and more about how tech companies are using design to deceive us, inciting us to share more data, buy more things, and spend more time with their products — but the failures of tech companies paled in comparison to the poor ballot and voting machine design of the midterm elections. These are some of the biggest design failures of a year that offered plenty of them. Though Apple released its most advanced phone ever this year, other aspects of its hardware design left much to be desired. Take the dreaded $9 dongle you need to use any of the company’s new phones with non-Bluetooth headphones. This year, this bit of wire — which users complain breaks easily and is hard to keep track of — becameBest Buy’s bestselling Apple product. -- -- 10 Published inFast Company Fast Company is the world's leading progressive business media brand, with a unique editorial focus on innovation in technology, leadership, world changing ideas, and design. Written byFast Company Official Medium account for the Fast Company business media brand; inspiring readers to think beyond traditional boundaries & create the future of business. Responses (10) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Fast Company,https://medium.com/@FastCompany?source=post_page---byline--56f32b027bb7---------------------------------------,1306,5 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:76:76/1*P5S1iK5kaTMwEpfhcDKOrw.png|https://miro.medium.com/v2/resize:fill:88:88/1*BstXfatD481ovGhbxYDE4w.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*P5S1iK5kaTMwEpfhcDKOrw.png|https://miro.medium.com/v2/resize:fill:96:96/1*P5S1iK5kaTMwEpfhcDKOrw.png|https://miro.medium.com/v2/resize:fill:128:128/1*P5S1iK5kaTMwEpfhcDKOrw.png|https://miro.medium.com/v2/resize:fill:96:96/1*BstXfatD481ovGhbxYDE4w.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*BstXfatD481ovGhbxYDE4w.jpeg
https://medium.com/hackernoon/the-state-of-ruby-2019-is-it-dying-509160a4fb92?source=tag_archive---------6-----------------------,The State of Ruby 2019: Is It Dying?,Follow me onTwitterand checksome of my other posts:,"Sign up Sign in Sign up Sign in Vinicius Brasil Follow HackerNoon.com -- 2 Listen Share There is a lot of discussion about the Ruby language demise. Well, this balderdash is circulating for a while now, and there are posts from 3+ years ago saying that Ruby is dead, but in fact, here we are. AGoogle Trends searchshows that the Ruby interest over time isn’t decaying, but following the same pattern similar technologies are tracing. Also, always keep in mind thatprogramming languages are tools to solve specific problems, and that is why there is no such thing as the best programming language. Ruby has gone through a lot of significant changes during the past year, and it is certainly not dying, but growing and evolving. The year of 2019 has a lot to the Ruby community. Check some of the key points below: A new version of Ruby has been released in December 2018. This release includes a lot of performance improvements and new features, including an initial implementation of a JIT (Just-In-Time) compiler. To say truly, this new JIT compiler has not achieved its best performance yet, ascovered here, but has a lot of future on it. The Ruby community considers this release as an opening to thenew era of Ruby. While I failed to make Ruby’s JIT production-ready in 2.6, I don’t regret what we’ve done this year. I needed to develop or lead all of the above things for Ruby 2.6, but I believe I can invest my time mainly on performance improvement in Ruby 2.7. —k0kubun While I failed to make Ruby’s JIT production-ready in 2.6, I don’t regret what we’ve done this year. I needed to develop or lead all of the above things for Ruby 2.6, but I believe I can invest my time mainly on performance improvement in Ruby 2.7. —k0kubun Besides this new JIT compiler, this new release of Ruby has improvedperformance up to 1.7x, apart from the5–10% performance improvements from Ruby 2.5.0. Ruby on Rails 6 is close. This release includes a lot of cool features that will get web development much easier, as Rails has been doing for years. 2018 has brought a major release, Rails 5.2.x, that included: And now, with Rails 6, there are a lot of exciting features, such as: Yes, Ruby was bad and Rails was slow. But that is not true to say in 2018, and won’t be in 2019. Ruby isn’t slow and Rails does scale. If it doesn’t for you, maybe you’ve chosen the wrong tools for the problem you’ve got. In 2019, let’s enjoy programming Ruby 2.6 and Rails 6! Happy New Year! Follow me onTwitterand checksome of my other posts: Vinicius Brasil 👾 (@vnbrs_) | Twitter The latest Tweets from Vinicius Brasil 👾 (@vnbrs_). Software developer, innovation geek, amateur musician, startups… twitter.com The Book Every Programmer Should Read Writing code that any programmer who read can understand is a must-have skill for software developers. The fact is… hackernoon.com How to Land a Job Using Open Source The way job recruitment works has changed. Your skills are far more valuable than your degrees. But how do you prove… hackernoon.com Do not be this kind of developer There's a kind of developer that can harm a whole workplace because of their… hackernoon.com -- -- 2 Published inHackerNoon.com Elijah McClain, George Floyd, Eric Garner, Breonna Taylor, Ahmaud Arbery, Michael Brown, Oscar Grant, Atatiana Jefferson, Tamir Rice, Bettie Jones, Botham Jean Written byVinicius Brasil Building cool stuff with Elixir, OTP and Ruby. Majoring in Theology and musician. Responses (2) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Vinicius Brasil,https://medium.com/@vnbrs?source=post_page---byline--509160a4fb92---------------------------------------,474,3 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/1*yHxMAzbdYpMHkQ613KM20w.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*76XiKOa05Yya6_CdYX8pVg.jpeg|https://miro.medium.com/v2/resize:fill:96:96/1*76XiKOa05Yya6_CdYX8pVg.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*76XiKOa05Yya6_CdYX8pVg.jpeg|https://miro.medium.com/v2/resize:fill:96:96/1*yHxMAzbdYpMHkQ613KM20w.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*yHxMAzbdYpMHkQ613KM20w.jpeg
https://medium.com/free-code-camp/unit-testing-services-endpoints-and-repositories-in-spring-boot-4b7d9dc2b772?source=tag_archive---------7-----------------------,"How to test services, endpoints, and repositories in Spring Boot",Why unit test endpoints?,"Sign up Sign in Sign up Sign in Emre Savcı Follow We’ve moved to freeCodeCamp.org/news -- 4 Listen Share In this post I will show you how to write unit tests in spring boot applications. Why is it necessary to write unit test requires another article to explain. But for a brief explanation, I will tell you several things. I usually defend the argument that code without unit tests is dead code. Because, when a developer adds a new feature to some code which is not covered by a unit test, it is prone to override existing business rules (which kills the code written before). Maybe it’s not exactly prone to it, but you can imagine what errors can occur when a complex project needs to be changed. Unit testing is the only way to protect your code against breaking changes. Why unit test endpoints? Every time we write an endpoint we need to be sure several things work correctly. The endpoint should return the data in the correct structure and handle the request correctly. We can test it manually, which is not preferable. So we write unit tests to ensure that our endpoints work correctly. There is also another way for testing endpoints known as automation tests, but that is not the subject of this post. Why unit test services? It should be clear already, but just in case: we need to be sure our business logic works correctly. Why unit test repositories? There are several cases to test repositories. Of course we don’t test the framework itself. But we do write unit tests to be sure that our specifications or relations have been implemented correctly. Now it’s time to show you how to test our controllers in spring boot. Let’s imagine we write an application which allows us to save users in a database. We define a user entity, a user service, and a controller. Note: The examples shown in this post are not for real production use architecture Our controller has a dependency on UserService but we aren’t interested in what service does right now. So now let’s write a unit test for our controller to be sure it works correctly. We mocked our service because we don’t need its implementation details. We just test our controller here. We useMockMvchere to test our controller and object mapper for serialization purposes. We setup ouruserService.Save()method to return the desired user object. We passed a request to our controller and after that we checked the returned data with the following line:andExpect(jsonPath(""$.name"").value(request.getName())). We have alsoother methods to use. Here is the list of methods: When we run the test we see that it passes. Now we go to test our UserService. It is quite simple to test. We mock the repository and inject our mocks into UserService. Now when we run the test we’ll see that it passes. Now let’s add a business rule to UserService: let’s say the user must have an email address. We change our save method in UserService as below: When we run the test again, we’ll see a failed test. Before we fix it, let’s write a test that satisfies this business. We wrote a new test that specified that if we send a null email, it’ll throwNullPointerException. Let’s fix the failed test by adding an email to our request: Run both tests: Now we’ve come to testing repositories. We use an in memory h2 database withTestEntityManager. Our repository is defined as below: First configure h2db. Create the file name application.yaml in test -> resources path: And let’s first write a basic test for our repository: save a user and retrieve it: When we run it we’ll see bunch of console output, and also our test passes: Now let’s add another method to our repository for searching for a user via email: And write another test: When we take a look at the console after running the test, we'll see the SQL generated by hibernate: So far so good. We have covered the basics of unit testing with spring boot. Now you don’t have any excuses to not write unit tests! I hope it is clear to you to how to write unit tests for different kinds of purposes. -- -- 4 Published inWe’ve moved to freeCodeCamp.org/news We’ve moved tohttps://freecodecamp.org/newsand publish tons of tutorials each week. See you there. Written byEmre Savcı Tech. Lead @Trendyol & Couchbase Ambassador | Go Türkiye, Kubernetes, Istio, CNCF, Scalability. Open Source Contributor. Responses (4) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Emre Savcı,https://medium.com/@mstryoda?source=post_page---byline--4b7d9dc2b772---------------------------------------,409,5 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/1*FT9XsHGlbCsKvWgeX8lE4A.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*MotlWcSa2n6FrOx3ul89kw.png|https://miro.medium.com/v2/resize:fill:96:96/1*MotlWcSa2n6FrOx3ul89kw.png|https://miro.medium.com/v2/resize:fill:128:128/1*MotlWcSa2n6FrOx3ul89kw.png|https://miro.medium.com/v2/resize:fill:96:96/1*FT9XsHGlbCsKvWgeX8lE4A.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*FT9XsHGlbCsKvWgeX8lE4A.jpeg
https://medium.com/fast-company/what-apple-needs-to-fix-in-2019-and-beyond-19c5f0731a23?source=tag_archive---------8-----------------------,What Apple Needs to Fix in 2019 (and Beyond),The company may have more cash reserves than most countries but it risks becoming irrelevant unless it fixes glaring problems and starts taking chances,"Sign up Sign in Sign up Sign in Member-only story The company may have more cash reserves than most countries but it risks becoming irrelevant unless it fixes glaring problems and starts taking chances Fast Company Follow Fast Company -- 22 Share By Jesus Diaz 2018was a rocky year for Apple. Despite becoming the world’s first trillion-dollar company this summer, it has seendisappointing salesfor the latest iPhone —its main cash cow— and, worse,analysts,industry players,journalists, andusersbelieve that the Cupertino company has stopped innovating in favor ofmilking its user base with marginally updated productsat higher price points. It’s adangerous game that can go southreally fast. It’s not that theApple Watch Series 4or thenew iPad Proare bad products. They are good. But having a couple of good products and apassable phoneis not enough in a hyper-competitive market where companies are working on new form factors for phones, computers, and wearables. The gap between Android and the iPhone widens—Applehas dropped to the number three phone manufacturer worldwide. Microsoft is quickly becoming the PC and tablet gold standard. Web services are dominated by Google and Amazon. And hundreds of companies are trying to create the next big thing. If Apple wants to stay on top, Tim Cook and his… -- -- 22 Published inFast Company Fast Company is the world's leading progressive business media brand, with a unique editorial focus on innovation in technology, leadership, world changing ideas, and design. Written byFast Company Official Medium account for the Fast Company business media brand; inspiring readers to think beyond traditional boundaries & create the future of business. Responses (22) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Fast Company,https://medium.com/@FastCompany?source=post_page---byline--19c5f0731a23---------------------------------------,2560,7 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/1*BstXfatD481ovGhbxYDE4w.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*P5S1iK5kaTMwEpfhcDKOrw.png|https://miro.medium.com/v2/resize:fill:96:96/1*P5S1iK5kaTMwEpfhcDKOrw.png|https://miro.medium.com/v2/resize:fill:128:128/1*P5S1iK5kaTMwEpfhcDKOrw.png|https://miro.medium.com/v2/resize:fill:96:96/1*BstXfatD481ovGhbxYDE4w.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*BstXfatD481ovGhbxYDE4w.jpeg
https://medium.com/better-programming/practical-tdd-test-driven-development-84a32044ed0b?source=tag_archive---------9-----------------------,A Practical Intro to Test-Driven Development,Test-driven development is hard — here’s the untold truth,"Sign up Sign in Sign up Sign in Member-only story Test-driven development is hard — here’s the untold truth Luca Piccinelli Follow Better Programming -- 5 Share These days you read a ton of articles about all the advantages of test-driven development (TDD), and hear a lot of talks at tech conferences that tell you to: “Do the tests!”, and how cool it is to do them. And you know what? Unfortunately, they are right (not necessarily about the “cool” part, but about the useful part). Tests are a must! The typical advantages we list when it comes to talking about TDD are real: Even if I’ve always agreed with these advantages, there was a time when I thought that I didn’t need TDD to write good and maintainable software. Of course, now, I know I was wrong, but why did I have this idea despite the shiny magic of the pros? There’s only one reason: it costs a lot. It costs a lot! Someone is probably thinking: “But, it costs even more if you don’t do the tests” — and this is right, too. -- -- 5 Published inBetter Programming Advice for programmers. Written byLuca Piccinelli I am a programmer. I love programming, any language, any paradigm | Let’s connect on LinkedInhttps://bit.ly/3wK0Q9n| Join me on mediumhttps://bit.ly/38MJmkN Responses (5) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Luca Piccinelli,https://medium.com/@luca-picci?source=post_page---byline--84a32044ed0b---------------------------------------,895,7 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/1*N3QgrRNao03AH6juPIk5rA.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*QNoA3XlXLHz22zQazc0syg.png|https://miro.medium.com/v2/resize:fill:96:96/1*QNoA3XlXLHz22zQazc0syg.png|https://miro.medium.com/v2/resize:fill:128:128/1*QNoA3XlXLHz22zQazc0syg.png|https://miro.medium.com/v2/resize:fill:96:96/1*N3QgrRNao03AH6juPIk5rA.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*N3QgrRNao03AH6juPIk5rA.jpeg
https://medium.com/inc./what-elon-musk-got-wrong-with-artificial-intelligence-b8d070e99972?source=tag_archive---------10-----------------------,What Elon Musk Got Wrong With Artificial Intelligence,Experts agree that we may not be ready for fully autonomous solutions,"Sign up Sign in Sign up Sign in Member-only story Experts agree that we may not be ready for fully autonomous solutions inc. magazine Follow Inc Magazine -- 8 Share By Anne Gherini Herbert Simon, one the inventors of Artificial Intelligence (AI), once remarked, “Machines will be capable, within 20 years, of doing any work a man can do.” Simon made this forward-thinking statement in 1965. What Simon and the other AI proponents failed to appreciate are the numerousunforeseen challengesinvolved in relying solely on machines. The AI field first emerged more than half a century ago. But it’s only been in the last ten years, due in large part to the rapid growth and democratization of machine learning, that we are starting to see the full potential of AI. Today, there are countlessopen-source AItools that help any entrepreneur get up and running on AI quickly, including Google’s TensorFlow, Microsoft’s Cognitive Toolkit, and Amazon Machine Learning. These advancements have acceleratedthe transitionfrom a model that involves AI assisting humans to one that involves humans assisting AI. This shift to requiring less human capital creates incredible opportunities for businesses to advance. Yet, many technology evangelists are pushing the needle even further and petitioning the eradication of human involvement. -- -- 8 Published inInc Magazine Welcome to Inc Magazine, where you can find everything you need to know to start and grow your business now. Written byinc. magazine Everything you need to know to start and grow your business now. Responses (8) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",inc. magazine,https://medium.com/@incmagazine?source=post_page---byline--b8d070e99972---------------------------------------,666,4 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/1*be9NhtCEZu-AB_zt2J46dg.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*5xv8leEElYbEGzsTRU0Jnw.jpeg|https://miro.medium.com/v2/resize:fill:96:96/1*5xv8leEElYbEGzsTRU0Jnw.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*5xv8leEElYbEGzsTRU0Jnw.jpeg|https://miro.medium.com/v2/resize:fill:96:96/1*be9NhtCEZu-AB_zt2J46dg.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*be9NhtCEZu-AB_zt2J46dg.jpeg
https://stuff.technology/how-to-enable-https-in-spring-boot-application-68fb03243852?source=tag_archive---------11-----------------------,No title found,,,Unknown,,0,Unknown,
https://medium.com/hackernoon/weather-sat-9620228789c8?source=tag_archive---------12-----------------------,How to Download Live Images From Government Weather Satellites,The Theory,"Sign up Sign in Sign up Sign in Member-only story Alex Wulff Follow -- Share Using nothing but your computer, some software, and a $20 radio dongle you can receive transmissions from NOAA weather satellites in the sky overhead. This is an incredibly exciting project that’s easy to do but produces great images. Think about it — you can receive images from a satellite almost 1000KM straight above you! The Theory NOAA operates a series of weather satellites, designated NOAA 15, NOAA 18, and NOAA 19, that circle the Earth in polar orbits. These satellites are particularly interesting because they’re constantly transmitting an easy-to-decode image signal of what they’re currently looking at. The satellites’ orbits are configured such that one of the three passes within almost every point on the globe every three hours. You can track each of the threehere. The closer the yellow line is to your location when the satellite is overhead the higher the satellite will appear in the sky. Keep in mind that the satellites’ trajectories across the globe (the yellow lines) are constantly progressing sideways by a few hundred miles with each successive orbit. You don’t really need to worry about tracking… -- -- Written byAlex Wulff I'm a Harvard student, maker, and radio enthusiast. Check out my book on radio communications atamzn.to/341cywAand my website atwww.AlexWulff.com No responses yet Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Alex Wulff,,189,8 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/2*OZJgVybjI19AlSIw3KgAFQ.jpeg|https://miro.medium.com/v2/resize:fill:96:96/2*OZJgVybjI19AlSIw3KgAFQ.jpeg|https://miro.medium.com/v2/resize:fill:128:128/2*OZJgVybjI19AlSIw3KgAFQ.jpeg
https://medium.com/coinmonks/caching-ethereum-events-with-mysql-18bfa3558355?source=tag_archive---------13-----------------------,Caching Ethereum events with MySQL,Published inCoinmonks,"Sign up Sign in Sign up Sign in Oleg Kondrakhanov Follow Coinmonks -- 5 Listen Share In this article, I am going to demonstrate a simple approach to caching Ethereum events. Here I won’t describe what events are as there are a lot of articles covering that topic (here is the perfect one). I’ll just say that typically we use events for some off-chain operations, for examples tracking token’s transfers or retrieving the filtered list of particular transactions, just like a good old SQL query. Let’s suppose we want to make a website that tracks some token transfers, a kind of Etherscan. We definitely need such simple operations like: What we have in web3 now isgetPastEventsmethod, the example usage of which is The main issue with this approach is it can be slow as blockchain grows, especially if you don’t run your own Ethereum node and use public providers like Infura or MyEtherApi. The next thing — it is almost impossible to implement some tricky queries as filter object’s functionality is quite limited. Besides, events already written to the blockchain can’t be changed, only new records can be added with time. This and other facts make events a perfect target for caching. In this example, we’ll use MySQL as a database for holding our event records. MySQL has capabilities to store raw JSON and then compose queries using that JSON object’s properties as if they were usual SQL columns. Let’s take a closer look at the result ofgetPastEventsmethod to realize what data we work with. I took some Binance coin transfers as an example. Each event object has the following structure: As you can see, the event arguments are stored inreturnValuesproperty.blockNumber,transactionHash,logIndexmight be useful too as I’ll show you later. Our goal is to write those JSON objects to the database and to implement easy access methods that can replace standard web3’sgetPastEventsmethod seamlessly. Here is the SQL script for creating theTransfertable. Some important things to explain: Optionally we could also add database index for increasing the performance. For example, for thetocolumn 3. To work with MySQL database in JavaScript we should installmysqlpackage 4. And the last — MySQL server. It is worth mentioning that we’ll use MySQL 5.7 as the latest 8.0 version doesn’t seem to be compatible with themysqlpackage (it gave me strange error ER_NOT_SUPPORTED_AUTH_MODE while trying to connect). We’ll utilize connection pool to make queries for this example. It would be more convenient to use a promisified version ofquerymethod Now we can use the following code to insert a record into thetransfertable created before. Here we also check for possible duplicate rows insertion. Now we don’t want to do anything special in that case, probably we’ve already written those duplicate events earlier or something like this. So we just consider this kind of exceptions handled. Let’s construct a contract object to retrieve events from. We can include onlyTransferevent interface in theabiparameter, like this: This is the base version of the caching function. First, we get event objects, then write them to the database, one by one. Now let’s expand this to a simple background script that constantly scans blockchain for the events emitted. Some utility functions The first one is simpleasync/awaitimplementation ofsetTimeout. The second one serves for infinite periodic calls offn— the worker function. With these helper functions, our background scanner looks quite simple Let me explain that ‘latestEthBlock + 1’ thing. Web3’sgetPastEvents(fromBlock, toBlock)returns events written within that[from, to]range, including the borders. So without this incrementing the nextcacheEventscall will again return the events written intolatestEthBlockas a part of the result. Though duplicate events won’t be inserted into database due to unique index implemented, we still don’t want this excess work to be done. This implementation should be pretty much enough for a simple background scanner. However, there is always room for improvement. We’ll return to it a bit later. Now let’s take a quick look at what we can do now with that data. Here is an example of the function to select transfers made from a particular address We query the database using the generatedfromcolumn. The most notable part here is that the result of the function looks just like the result of web3’sgetPastEvents. It makes refactoring the current code a lot easier. The event object contains a lot of properties that might be totally useless for your application. It would be better to remove the excess before writing to the database. That way we are saving a lot of space. As you might also have noticed, the current version of the scanner begins with block #0 each time it is restarted. While scanning all the way to current block it will try to insert duplicate records into the database. We can eliminate that excess work by querying the database for the latest cached block. It would be also nice to start scanning not from the block #0, but at least from the block when the contract was deployed. For simplicity, you might get this information usingetherscan.io. Here we again use MySQL json functions to get theblockNumberproperty of the event object. Then replace the old piece of thescanfunction with the new one Finally, we’ve created a simple but working event scanner that continuously caches events into MySQL database. If you have any questions please feel free to contact me and I’ll try to answer. Complete source code is available herehttps://github.com/olekon/p1_eth_caching. Get Best Software Deals Directly In Your Inbox Get Best Software Deals Directly In Your Inbox -- -- 5 Published inCoinmonks Coinmonks is a non-profit Crypto Educational Publication. Other Project —https://coincodecap.com/& Email —gaurav@coincodecap.com Written byOleg Kondrakhanov Software engineer Responses (5) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Oleg Kondrakhanov,https://medium.com/@kondrahanov?source=post_page---byline--18bfa3558355---------------------------------------,569,7 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/1*DElOBKmY_j06lWbrLxbpiQ.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*-_aiJHzJPz655N7iSSrLrQ.png|https://miro.medium.com/v2/resize:fill:96:96/1*-_aiJHzJPz655N7iSSrLrQ.png|https://miro.medium.com/v2/resize:fill:128:128/1*-_aiJHzJPz655N7iSSrLrQ.png|https://miro.medium.com/v2/resize:fill:96:96/1*DElOBKmY_j06lWbrLxbpiQ.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*DElOBKmY_j06lWbrLxbpiQ.jpeg
https://medium.com/datadriveninvestor/why-machine-learning-is-so-important-for-the-future-of-photography-135437e66a8d?source=tag_archive---------14-----------------------,Why Machine Learning Is So Important For The Future Of Photography,Published inDataDrivenInvestor,"Sign up Sign in Sign up Sign in Member-only story Robert Rittmuller Follow DataDrivenInvestor -- 1 Share This is an attempt to clear the air, reduce the hype, and bring some basic understanding to the subject of why machine learning matters so much to the future of photography. I don’t doubt for a moment that the hype around machine learning has roots in some amazing accomplishments, many of which I use almost daily, but when it comes to how the technology affects the world of photography, we need to dig deeper. The story really does start with recent innovations in machine learning, more specifically, the machine learning algorithms that support computer vision. Yes, you could go back further and delve into some of the work done during the last Machine Learning / Artificial Intelligence “Winter” but that’s digging a bit deeper than we need to illustrate why the future of photography depends on these technologies.This CNET postcomes close to getting the point across on what the future impact of this technology might be but lacks some real-world examples. What it does get right is that the recent combination within smartphones of machine learning and the latest image processing techniques is what gives us this glimpse into the future of photography. “Machine Learning” — Gives “computers the ability to learn without being explicitly programmed.“ —… “Machine Learning” — Gives “computers the ability to learn without being explicitly programmed.“ —… -- -- 1 Published inDataDrivenInvestor empowerment through data, knowledge, and expertise. subscribe to DDIntel athttps://ddintel.datadriveninvestor.com Written byRobert Rittmuller A devout technologist, I write about AI, cybersecurity, and my favorite topic, photography.https://www.rittmuller.com Responses (1) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Robert Rittmuller,https://medium.com/@robert.rittmuller?source=post_page---byline--135437e66a8d---------------------------------------,349,7 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/1*-iVQZzi2BASLF6Bj9_qIMQ@2x.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*2mBCfRUpdSYRuf9EKnhTDQ.png|https://miro.medium.com/v2/resize:fill:96:96/1*2mBCfRUpdSYRuf9EKnhTDQ.png|https://miro.medium.com/v2/resize:fill:128:128/1*2mBCfRUpdSYRuf9EKnhTDQ.png|https://miro.medium.com/v2/resize:fill:96:96/1*-iVQZzi2BASLF6Bj9_qIMQ@2x.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*-iVQZzi2BASLF6Bj9_qIMQ@2x.jpeg
https://medium.com/@MikeFernandez/2018-year-in-review-for-southern-california-tech-1be84db9d343?source=tag_archive---------15-----------------------,2018 Year in Review for Southern California Tech,The Unicorn Club Keeps Growing,"Sign up Sign in Sign up Sign in Mike Fernandez Follow -- 2 Listen Share Last month marked my five year anniversary as an investor. I first moved back to Los Angeles to join the world of venture capital in 2013, when the tech ecosystem in Southern California looked very different than it does today. Long time LA fund GRP Partners had justrebrandedas Upfront Ventures, moving its office from Century City to Santa Monica. The biggest recent exits were for Cornerstone OnDemand, Riot Games, and Demand Media. GQ had recently named Abbot Kinneythe coolest block in America, but the Snap-driven tech transformation of Venice was still in its infancy. Greater Southern California had a long history of building strong tech businesses, but still felt like it wasn’t living up to it’s full potential. Since then, Southern California has been on a roll. Major exits for companies like Oculus VR, BlackLine, and Lynda.com have shown that Southern California can build successful companies in diverse industries. Greg Bettinelli’s list of SoCal investors hasexploded in length. And everybody in the Bay Area seems to be moving to SoCal, or at least talking about it. The trend continued with in 2018, in which Southern California saw a record number of unicorn financing rounds, several strong exits, and the emergence of what was arguably 2018’s hottest venture-backed company. The Unicorn Club Keeps Growing According to CB Insights (plus two possible additions of Fair and Seismic right at the finish line of the year), seven companies joined the Unicorn club in Southern California in 2018. Perhaps what is most notable about these companies is their diversity in industries. For years, naysayers downplayed Los Angeles startups in particular as being too focused on consumer and media markets, and lacking expertise in enterprise software or deep tech. In 2018’s unicorn batch we see industries ranging from healthcare to law to HVAC — no media or CPG this year. Santa Monica is heavily represented on the list, but the surprise runner up city was Glendale, which counts both LegalZoom and ServiceTitan as residents. Already home to the edtech unicorn Age of Learning, Glendale has quietly emerged as a major center for tech hiring in Southern California, far away from the hype of Venice or the laboratories of La Jolla. Strong Exits Across the Region By far the biggest news story of 2017 for the Southern California tech ecosystem was the IPO of Snap. In just a little over five years from launching, the company had managed to change the way that teens communicate, build a serious competitor to Facebook’s social media dominance (spurning acquisition offers in the process), and turn the neighborhood of Venice on its head as at spread into every square foot of available office space. Shortly after Snap went public, many LA tech watchers were left wondering, what’s next? Perhaps the theme of big SoCal exits in 2018 was perseverance. Santa Barbara-based Sonos finally went public in August, a full sixteen years after its founding. Carlsbad-based Luxtera announced a major acquisition by Cisco seventeen years after its founding. And Amazon acquired Santa Monica-based Ring, which Shark Tank investorspublicly rejectedon national television. These three exits showed that the vast majority of companies are not overnight successes, and they require time and patience to build in the face of constant detractors. Another major acquisition for 2018 was that of Irvine-based Cylance by BlackBerry for $1.4B. Over the past few years, Cylance has joined CrowdStrike in building a cluster of cybersecurity expertise in Irvine, and we are already beginning to see a new generation of companies emerging out of Cylance’s success, such as Obsidian Security. Meanwhile, CrowdStrike has had a banner year and is hot on IPO watch-lists for 2019. The Scooter Invasion If Venice thought it would receive some respite from tech mania after the Snap IPO, it was sorely mistaken. Just a few months later, Travis VanderZanden released the first Bird Scooter onto the streets of Venice. Within a year, Bird would notch over 10 million rides, radically changing transportation in cities across the globe and setting a new benchmark for rapid growth. Wired Magazine even named 2018 the“Year of the Scooter”. In the process, the company raised over $400m from Sand Hill road heavyweights like Index, Sequoia, Accel, and CRV, as well as from almost every large SoCal-based firm: B Capital (where I work), Greycroft, Lead Edge, Upfront Ventures, Pritzker Group, and Sound Ventures, among others. Over the course of the year, Bird caused bikeshare company Lime to rapidly pivot into scooters and inspired a wave of copycats around the world. It drew Uber and Lyft into the market right in the middle of their IPO preparations. And it set off a wave of panic among municipal governments and regulators, who didn’t want to be caught flat footed in the face of a new technology on their streets. We are still in the early innings of the scooter game, but Bird’s rapidly expanding team has already shown it can continue to innovate rapidly, launching aGovTech platformand announcing an initiative to allow local operators tolaunching their own fleets. Time will tell how this market plays out, but Bird has been a clear proof point for Southern California’s ability to attract talent and capital to build world-changing businesses. The Housing Crisis and Looking Ahead 2018 was a year in which the tech industry was placed in the spotlight for its negative effects on society, ranging from Amazon’s HQ2 tax credit grab to the scourge of fake news. Perhaps the most pressing local issue has been tech’s impact on housing. Amid the backdrop of a much larger Southern California housing crisis, the clustering of startups around Venice and Santa Monica and large tech companies in Playa Vista and Culver City has put extreme pressure on housing prices on the Westside, leading to increasing arguments about gentrification, displacement, and what it means to be a good corporate neighbor. I am a firm believer that the long-term health of Southern California’s technology sector depends on its ability to continue to expand outside of Venice and Santa Monica, where there is simply lack of affordable housing options for employees within reasonable commuting distance. Greycroft was a pioneer in opening an office in the Arts District well before there was a notable cluster of tech companies in Downtown Los Angeles. The move is beginning to pay off, as large tech companies likeSpotifyput down roots and a new cluster of startups including the likes ofHollar,HopSkipDrive, andProducePaydecide to make DTLA home. I’m also encouraged to see clusters of great startups emerging in regions such as the Valley (e.g.Floqast,Papaya) and the Gateway Cities (e.g.Cargomaticin Long Beach andNext Truckingin Lynwood), where the local expertise in transportation and logistics is beginning to spawn tech-enabled challengers to a staid industry. As we look to 2019 and the future, we need to make sure that we foster these budding communities and give the same level of support that has helped the Westside produce so many winning companies. As the past year has shown, the growth in Southern California’s tech ecosystem will come from across the region, in sectors that we might not have anticipated. SoCal has finally proven without a doubt that it can compete across every subsector of tech, and the future continues to look bright. -- -- 2 Written byMike Fernandez VC at B Capital Responses (2) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Mike Fernandez,,154,6 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/0*8RUE5JX7V14mqZAQ.jpeg|https://miro.medium.com/v2/resize:fill:96:96/0*8RUE5JX7V14mqZAQ.jpeg|https://miro.medium.com/v2/resize:fill:128:128/0*8RUE5JX7V14mqZAQ.jpeg
https://itnext.io/my-tech-reading-list-for-2019-4e515e49ec74?source=tag_archive---------16-----------------------,My Tech Reading List for 2019,"Learning never stops, so shouldn’t you!","Sign up Sign in Sign up Sign in Learning never stops, so shouldn’t you! Rajendra Uppal Follow ITNEXT -- 2 Listen Share It’s been a great year 2018 filled with lot of learning and achieving and I am super excited to enter year 2019 with a purpose to become better developer, technology leader and build top-notch large scale products and high performing engineering teams. Continuous learning and improvements is the key in this direction. One of the most important thing to observe about these companies is, their focus on SPG (Scale, Performance, Growth). So, here is my tech manifesto for year 2019. I’ve been following and learning from engineering blogs of large and small startups alike in the year 2018. There are some old and some new entries in this list which I really look forward to learning a lot this year and apply in my work. Instagram Instagram is one of largest web applications built using Python. Its enormous scale features are delight to learn from and know about. You might want to know how Instagram recommends content toover 1 billion users. Check it out here: Lessons Learned at Instagram Stories and Feed Machine Learning Instagram machine learning has grown a lot since we announced Feed ranking back in 2016. Our recommender system serves… instagram-engineering.com Pinterest Again, Pinterest is one of largest deployments of Python (Django) and Kafka! Their Kafka deployment handles enormous scale and an inspiration to any app building on message queuing. As a glimpse, here is an article on their Kafka deployment and how they handle15 million messages per second! How Pinterest runs Kafka at scale Yu Yang | Pinterest engineer, Data Engineering medium.com Uber Uber is doing a lot. Open source, AI, Machine Learning, Big Data, you name it! I plan to go through their most important articles about handling large scale and APIs. If you have ever wondered how Uber does event prediction (driver demand or when UberEats order will arrive) using ELK (Elasticsearch Logstash Kibana), here is a great article: Engineering Uber Trip Distance and Duration Predictions in Real Time with ELK To architect a precise and easily interpretable forecasting experience for engineering and operations, we built a… eng.uber.com Another one of my favorite is their efforts in migrating from monolith architecture to distributed SOA. Service-Oriented Architecture: Scaling the Uber Engineering Codebase As We Grow | Uber Engineering… Like many startups, Uber began its journey with a monolithic architecture, built for a single offering in a single… eng.uber.com Grofers Oh what a blog for tech! Loved it, specially their blog name lambda. They are on AWS ❤ ️it! They are just killing it in technology. Every engineer is publishing on the tech blog. Grofers is a pure tech company that gives right emphasis on every component of a product be it design, data, infra, architecture, UI/UX, CI/CD, or security, open source, you name it! Here is a nice article about how they are building a better grocery buying experience: Data and the bid to simplify grocery By Manas Gupta and Neeraj Sharma lambda.grofers.com UrbanClap UrbanClap uses full stack JavaScript and I love their tech and product. Specially how they use Redis ❤ it! The Journey of Redis at UrbanClap By Aditya Chowdhry medium.com Goibibo Very interesting tech blog. Amazing to see how they improved flight search user experience through algorithms. Check it out here: Goibibo Data-Driven Flight Search Result Optimisation In the year 2000 , Sheena Iyengar and Mark Lepper tried out an experiment with Jam flavours. The experiment took place… tech.goibibo.com I have just scratched the surface of large scale software design and architecture learning that I plan to go thru this year. There is plethora of resources that one can reach out for on the internet. Lets figure! Trello Just love Trello. Its super cool and best SaaS tool I have come across till date. I’ve been using Trello for about 5 years now and went through their tech stack many times. This year is the time to make use of this learning in scaling and building my current product. Checkout their tech stack here: The Trello Tech Stack 2016 Our last post outlining our tech stack was a mere four months after Trello launched. More than three years and 8… tech.trello.com I’ve been very impressed with tech stacks ofDropbox, Instagram, Pinterest, Grofers, UrbanClap, Trello, Uberetc. to name a few and will be keep following, learning and applying this year. Always been big on clean code and best practices. I’ve been reading them time and again and want to continue the same. Lets face it and accept it. We all save so many bookmarks in our web browser or medium but never turn back to them. Lets go back and read/ watch all those articles/ videos we bookmarked and remove that are not relevant or useful anymore! We’ve spent better part of the last year building and scaling current technology, product and engineering team. So, we could write and share less but we will be starting our engineering blog soon and write and share lot of learnings this year. So, off we go! Cheers! -- -- 2 Published inITNEXT ITNEXT is a platform for IT developers & software engineers to share knowledge, connect, collaborate, learn and experience next-gen technologies. Written byRajendra Uppal Software Engineering Leader, Founder at Kite Tech Community, Ex Microsoft, Adobe, Studied at IIT Delhi and IIT Kanpur.www.linkedin.com/in/rajendrauppal Responses (2) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Rajendra Uppal,https://medium.com/@rajendrauppal/following?source=post_page---post_author_info--4e515e49ec74---------------------------------------,125,4 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/1*dtjZTg8a4u7vr3bYkXtDkQ.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*yAqDFIFA5F_NXalOJKz4TA.png|https://miro.medium.com/v2/resize:fill:96:96/1*yAqDFIFA5F_NXalOJKz4TA.png|https://miro.medium.com/v2/resize:fill:128:128/1*yAqDFIFA5F_NXalOJKz4TA.png|https://miro.medium.com/v2/resize:fill:96:96/1*dtjZTg8a4u7vr3bYkXtDkQ.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*dtjZTg8a4u7vr3bYkXtDkQ.jpeg
https://medium.com/sleepymaniac-blog/building-a-ci-cd-pipeline-for-nuget-package-with-help-from-gitversion-nuke-and-azure-devops-4dd00521b1ac?source=tag_archive---------17-----------------------,Building a CI/CD pipeline for nuget package.,Published inSleepyManiac Blog,"Sign up Sign in Sign up Sign in SleepyManiac Follow SleepyManiac Blog -- Listen Share Getting started So, you’re willing to publish your fist ever super awesome library as nuget package? Worry not, in this guide I will help you Creating a repository Let’s start off by creating a github repository. On github web interface, find New button. From there, enter a new repository name and choose a license (e.g. MIT). Github does not have a default .gitignore for .net projects, so leave it empty for now. Starting up your project Next thing we need to do is cloning the newly created repository. (You may use “git clone {repouri}”). First thing we need to do is creating a .gitignore for our project. The easyest way is just copying the file from another open source project (e.g.https://github.com/aspnet/EntityFrameworkCore/blob/master/.gitignore) Now we can finally copy the library code to the repository. I prefer to put the source code in a “src” directory, but it’s entirely up to you. For an open source library, you should strongly consider adding SourceLink supporthttps://github.com/dotnet/sourcelink.This allows other developers to debug through your code. Versioning Versioning is very hard! If you are not fancy manually versioning each and every package, I suggest using automated tools for that. The best tool I’ve been working with ishttps://gitversion.readthedocs.io/en/latest/.This small command line tool parses the tags and branch information and is capable if incrementing the versions on it’s own! It requires zero configuration, but should you really need to adjust some values, you may place a config file to the root of your repository. In the next section, I will show you how to integrate this tool into CI/CD pipeline. CI/CD pipeline I personally think that the whole CI/CD process (outside of CI vendor-specific tasks) should be fully reproducible locally. Therefore, I recommend defining build steps using either Cake (https://github.com/cake-build/cake) Fake (https://github.com/fsharp/FAKE) or Nuke(https://github.com/nuke-build/nuke). I personally prefer Nuke, for it’s incredible integration with IDE and outstanding CLI tools. To get started with NUKE: After you go through the setup process, you should be able to see a new project appear in your solution. And it already has some steps defined for you! There is some customization required. You need to include the pack target for creating a nuget package and include reporting of test results. You may also want to create a target that combines the other targets in a pipeline to be called by the CI tool. A sample with those commands could be found in my repositoryhere. Now, commit all the changes to source control and let’s add the Azure Pipelines integration. Add a badge to you github repo. From the build pipeline, hit the 3 dots menu and choose StatusBadge button. This will open a page with MD preset. Include this into your Readme.MD that can be found in the root of your repository. Publishing to nuget First, if you’ve done everything according to the samples provided, you can trigger the build on Azure DevOps and the resulting nuget packages will be available in the build artifacts Download the package and go to nuget.org. Find the upload button and simply drag and drop the nupkg file. Your package will go through validation process, and after it finishes it should be available for download. That’s it! -- -- Published inSleepyManiac Blog Personal blog of Dzmitry Safarau, software developer, game lover, SF fan, photographer, member of @dotnetfdn. I love F# and C#. Written bySleepyManiac Software developer, Game lover, SF fan. No responses yet Help Status About Careers Press Blog Privacy Terms Text to speech Teams",SleepyManiac,https://medium.com/@sleepymaniac?source=post_page---byline--4dd00521b1ac---------------------------------------,64,4 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/1*H4G_1sC_V_g3RoLCmGaz4w.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*XUvdIOypfu1Zzeh3wAEaYA.jpeg|https://miro.medium.com/v2/resize:fill:96:96/1*XUvdIOypfu1Zzeh3wAEaYA.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*XUvdIOypfu1Zzeh3wAEaYA.jpeg|https://miro.medium.com/v2/resize:fill:96:96/1*H4G_1sC_V_g3RoLCmGaz4w.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*H4G_1sC_V_g3RoLCmGaz4w.jpeg
https://uxdesign.cc/an-ode-to-spotify-a-good-product-with-great-product-thinking-9842b3447f5a?source=tag_archive---------18-----------------------,An ode To Spotify: a good product with great product thinking,Published inUX Collective,"Sign up Sign in Sign up Sign in Viba Mohan Follow UX Collective -- 2 Listen Share If you ask my classmates, they’ll tell you that I’m obsessed with Spotify. I’ve based several of my projects on it. I reference it as a great product while citing examples during class discussions. And you’ll constantly find me advocating for it as the best music streaming service available. This isn’t quite simply because I think Daniel Ek(the founder) is a genius, it’s also because I think the product is a beauty all by itself. So as I look at this IDEO Pop Quiz question “What product do you find the most relevant & interesting?” — to me it‘s a no brainer. Ithasto be Spotify. Why, you ask? Well for one, think about what our lives looked like before Spotify. Here in India, you’d find people from all walks of life pirating music and then liberally sharing it with their friends. Even a child will be able to tell you that it’s difficult for an artist to make a living in a society like that. Sure, there was the occasional audiophile who’d collect music CDs and care for them like it was worth a fortune — because it was. But Spotify was built in an era when trust, in the music industry, was running at an all time low. Record companies would sue individuals and organisations alike for pirating music. And musicians were railing against their fans for the same. They uprooted the existing boundaries of music and redefined them in ways that I still don’t fully understand. They balanced out the needs of artists and their fans. Fans were tired of the tediousness of downloading illegal music and the fiscal costs of actually purchasing music. They were struggling with issues of loyalties to their favourite artists and they weren’t able to discover new music that felt personal yet trendy. Artists on the other hand needed to make a living and needed to truly connect with their audience. So, in the age of commercialisation, they built a product with a vision to simultaneously uplift artists, personalise music for listeners and provide smaller artists with the kind of audience they could only hope to tap into. As a designer, I recognise this to be excellent product thinking. They recognised key opportunities and exploited them in a healthy manner. They listened to their users and adapted as and when needed. To build on personalisation, they integrated a couple of niche features — like Spotify Unwrapped, Spotify Singles, playlists from your favourite artists and Daily Mixes. Spotify Unwrapped not only serves the purpose of being a subtle, high level campaign that markets the product, but also helps users feel more connected to the app and the music that they listen to. In a quaint, unimposing manner it takes you through a memory lane filled with nostalgia and triggers the pride of belonging to an artists fandom. For example, someone listened to 3000 hours of ODESZA on Spotify and now the entire ODESZA community revers him as this sort of legendary #1 fan. They built a community in a way that most apps could only dream of. And they did so by directly adding value to their users lives. Which might be what drew me to Spotify in the first place. While other streaming services cater to the simple tasks of listening to and sharing music, Spotify drew out complex yet subtle interactions that help users connect to artists in ways that they never quite did before. Plus, in this day and age, I think that they are especially relevant because they give artists a voice and a platform to reach an audience they may have otherwise never acquired. The cynic will tell you that streaming services like Spotify are killing artists. But I have a different take on this. The typical artist believes that if they keep playing shows, they’ll one day get discovered and then catapult their way into fame and fortune. But that’s not how the world works. This might be the reality of a privileged few — those who were maybe born into wealth and influence might be able to ease their way into a scenario like this, but for the average Joe, it’s their job to build their career. I’m aware that Spotify pays artists mere pennies for each stream. But the opportunity cost of a service like Spotify is more free ranging than providing an artist with a steady source of income. Spotify won’t build an artists career. It never claimed it would. But it will provide them with the data to locate and analyse their followers, connect them concerts and merchandise and boost the rate at which they are being discovered. It will help an artist find people who connect with their music and it is the job of the artist to transform passive listeners to active fans. People want a fantasy, but Spotify was built for the present day reality. A career in music is a privilege. Not everyone can hope to do this. But Spotify helps make it possible. And in my books this is both interesting and relevant because it mirrors the paradigm shift that is on going in a new society that provides you with unconventional opportunities that when met with creativity can prove to be extremely rewarding. So maybe what I’m trying to say is that I love Spotify because Spotify is a great product with ingenious product thinking. -- -- 2 Published inUX Collective We believe designers are thinkers as much as they are makers.https://linktr.ee/uxc Written byViba Mohan Method over madness. //www.vibamohan.com Responses (2) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Viba Mohan,https://medium.com/@viba?source=post_page---byline--9842b3447f5a---------------------------------------,419,4 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/2*36YVjRXTVl_UtnrNjXbPLw.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*mDhF9X4VO0rCrJvWFatyxg.png|https://miro.medium.com/v2/resize:fill:96:96/1*mDhF9X4VO0rCrJvWFatyxg.png|https://miro.medium.com/v2/resize:fill:128:128/1*mDhF9X4VO0rCrJvWFatyxg.png|https://miro.medium.com/v2/resize:fill:96:96/2*36YVjRXTVl_UtnrNjXbPLw.jpeg|https://miro.medium.com/v2/resize:fill:128:128/2*36YVjRXTVl_UtnrNjXbPLw.jpeg
https://medium.com/javascript-scene/top-javascript-frameworks-and-topics-to-learn-in-2019-b4142f38df20?source=tag_archive---------19-----------------------,Top JavaScript Frameworks and Topics to Learn in 2019,Prediction: React Continues to Dominate in 2019,"Sign up Sign in Sign up Sign in Eric Elliott Follow JavaScript Scene -- 36 Listen Share It’s that time of year again: The annual overview of the JavaScript tech ecosystem. Our aim is to highlight the learning topics and technologies with the highest potential job ROI. What are people using in the workforce? What do the trends look like? We’re not attempting to pick what’s best, but instead using a data-driven approach to help you focus on what might actually help you land a job when the interviewer asks you, “do you know __(fill in the blank)__?” We’re not going to look at which ones are the fastest, or which ones have the best code quality. We’ll assume they’re all speed demons and they’re all good enough to get the job done. The focus is on one thing: What’s actually being used at scale? The big question we’ll look at is the current state of component frameworks, and we’re going to focus primarily on the big three: React, Angular, and Vue.js, primarily because they have all broken far ahead of the rest of the pack in terms of workplace adoption. Last year I noted how fast Vue.js was growing and mentioned it might catch Angular in 2018. That didn’t happen, but it’s still growing very quickly. I also predicted it would have a much harder time converting React users because React has a much stronger user satisfaction rate than Angular — React users simply don’t have a compelling reason to switch. That played out as expected in 2018. React kept a firm grip on its lead in 2018. Interestingly, all three frameworks are still growing exponentially, year over year. Prediction: React Continues to Dominate in 2019 React still hasmuch higher satisfaction ratings than Angularfor the third year we’ve been tracking it, and it’s not giving up any ground to challengers. I don’t currently see anything that could challenge it in 2019. Unless something crazy big comes along and disrupts it, React will be the framework to beat again at the end of 2019. Speaking of React, it just keeps getting better. The newReact hooks APIreplaced theclassAPI I’ve been merely tolerating since React 0.14. (TheclassAPI still works, but the hooks API is reallymuch better). React’s great API improvements, like better support for code splitting and concurrent rendering (seedetails), are going to make it really hard to beat in 2019. React is now without a doubt, the most developer friendly front-end framework in the space. I couldn’t recommend it more. Data Sources We’ll look at a handful of key pieces of data to gauge interest and use in the industry: Google Search Trends React overtook Angular in the search trends in January 2018, and held its lead through the end of the year. Vue.js now holds a visible position on the graph, but still small factor in the search trends. For comparison: last year’s graph: Package Downloads Package downloads give us a fair indication of what’s actually being used, because developers frequently download the packages they need while they’re working. Overly-clever readers will note that sometimes they download these things from their internal corporate package repos, to which I answer, “why yes, that does happen — to all three frameworks.” All of them have established a foothold in the enterprise, and I’m confident in the averaging power of this data at scale. React Monthly Downloads: 2014–2018 Angular Monthly Downloads: 2014–2018 Vue Monthly Downloads: 2014–2018 Let’s look at a quick visual comparison of the share of downloads: “But you’re forgetting all about Angular 1.0! It’s still huge in the enterprise.” No, I’m not. Angular 1.0 is still used a lot in the enterprise in the same way that Windows XP is still used a lot in the enterprise. It’s definitely out there in enough numbers to notice, but the new versions have long since dwarfed it to the point that it’s now less significant than the other frameworks. Why? Because the software industry at large, and over-all use of JavaScriptacross all sectors (including the enterprise)is growing so fast that new installs quickly dwarf old installs, even if the legacy appsnever upgrade. For evidence, just take another look at those download charts. More downloads in 2018 than in the previous yearscombined. Job Board Postings Indeed.com aggregates job postings from a variety of job boards. Every year,we tally the job postings¹mentioning each framework to give you a better idea of what people are hiring for. Here’s what it looks like this year: Again, a lot more total jobs this year than the previous year. I dropped Ember because it’s clearly not growing at the rate that everything else is. I wouldn’t recommend learning it to prepare for a future job placement. jQuery and Ember jobs didn’t change much, but everything else grew a lot. Thankfully, the number of new people joining the software engineering field has grown a lot as well in 2018, but we need to continue to hire and train junior developers (meaning we needqualified senior developers to mentor them), or we won’t keep pace with the explosive job growth. For comparison, here’s last year’s chart: Average salary climbed again in 2018, from $110k/year to $111k/year. Anecdotally, the salary listings are lagging new hire expectations, and hiring managers will struggle to hire and retain developers if they don’t adjust for the developer’s market and offer larger pay increases. Retention and poaching continues to be a huge problem in 2018 as employees jump ship for higher paying jobs, elsewhere. I say it every year: Focus on the fundamentals. This year you’re getting some extra help. All software development is composition: The act of breaking down complex problems into smaller problems, and composing solutions to those smaller problems to form your application. But when I ask JavaScript interviewees the most fundamental questions in software engineering, “what is function composition?” and “what is object composition?” they almost invariably can’t answer the questions, even though they do them every day. I have long thought this was a very serious problem that needs to be addressed, so I wrote a book on the topic:“Composing Software”. If you learn nothing else in 2019, learn how to compose software well. If you learn nothing else in 2019, learn how to compose software well. On TypeScript TypeScript continued to grow in 2018, and it continues to be overrated becausetype safety does not appear to be a real thing(does not appear to reduce production bug density by much), andtype inferencein JavaScript without TypeScript’s help is really quite good. You can even use the TypeScript engine to get type inference in normal JavaScript using Visual Studio Code. Or install the Tern.js plugins for your favorite editor. TypeScript continues to fall flat on its face for most higher order functions. Maybe I just don’t know how to use it correctly (after years living with it on a regular basis — in which case, they really need to improve usability, documentation, or both), but I still don’t know how to properly type the map operation in TypeScript, and it seems to be oblivious to anything going on in atransducer. It fails to catch errors, and frequently complains about errors that aren’t really errors at all. It just isn’t flexible or full featured enough to support how I think about software. But I’m still holding out hope that one day it will add the features we need, because as much as its shortcomings frustrate me while trying to use it for real projects, I also love the potential of being able to properly (and selectively) type things when it’s really useful. My current rating: Very cool in very select, restricted use-cases, but overrated, clumsy, and very low ROI for large production apps. Which is ironic, because TypeScript bills itself as “JavaScript that scales”. Perhaps they should add a word: “JavaScript that scales awkwardly.” What we need for JavaScript is a type system modeled more after Haskell’s, and less after Java’s. Other JavaScript Tech to Learn Last year I predicted that blockchain and fin-tech would be big technologies to watch in 2018. That prediction was spot on. One of the major themes of 2017–2018 was the rise of crypto and building the foundations ofthe internet of value.Remember that phrase. You’re going to hear it a lot, soon. If you’re like me and you’ve been following decentralized apps since the P2P explosion, this has been a long time coming. Now that Bitcoin lit the fuse and showed how decentralized apps can be self-sustaining using cryptocurrencies, the explosion is unstoppable. Bitcoin has grown several orders of magnitude in just a few years. You may have heard that 2018 was a “crypto winter”, and got the idea that the crypto industry is in some sort of trouble. That’s complete nonsense. What really happened was at the end of 2017, Bitcoin hit another 10x multiple in an epic exponential growth curve, and the market pulled back a bit, which happens every time the Bitcoin market cap grows another 10x. In this chart, each arrow starts at another 10x point, and points to the low point on the price correction. Fundraising for crypto ICOs (Initial Coin Offerings) peaked in early 2018, and the 2017–2018 funding bubble brought a rush of new job openings into the ecosystem, peaking at over 10k open jobs in January 2018. It has since settled back to about 2,400 (according to Indeed.com), but we’re still very early and this party is just getting started. There is a lot more to say about the burgeoning crypto industry, but that’s a whole other blog post. If you’re interested, read“Blockchain Platforms and Tech to Watch in 2019”. Other Tech to Watch As predicted last year, these technologies continued to explode in 2018: AI/Machine Learningis in full swing with 30k open jobs at the close of 2018, deep fakes, incredible generative art, amazing video editing capabilities from the research teams at companies like Adobe — there has never been a more exciting time to explore AI. Progressive Web Applicationsare quickly just becoming how modern web apps are properly built — added features and support from Google, Apple, Microsoft, Amazon, etc. It’s incredible how quickly I’m taking the PWAs on my phone for granted. For example, I don’t have the Twitter Android app installed on my phone anymore. I exclusively usethe Twitter PWA instead. AR(Augmented Reality)VR(Virtual Reality)MR(Mixed Reality) all got together and joined forces like Voltron to becomeXR(eXtended Realty). The future of full-time XR immersion is coming. I’m predicting within 5–10 years for mass adoption of consumer XR glasses. Contact lenses within 20. Thousands of new jobs opened up in 2018, and this industry will continue to explode in 2019. Robotics, Drones, and Autonomous VehiclesAutonomous flying drones are already here, autonomous robots continue to improve, and more autonomous vehicles are sharing the road with us at the end of 2018. These technologies will continue to grow and reshape the world around us through 2019 and into the next 20 years. Quantum Computingprogressed admirably in 2018, as predicted, and as predicted, it did not go mainstream, yet. In fact, my prediction, “it may be 2019 or later before the disruption really starts” was likely very optimistic. Researchers in the crypto space have paid extra attention to quantum-safe encryption algorithms (quantum computing will invalidate lots of today’s assumptions about what is expensive to compute, and crypto relies on things being expensive to compute), but in spite of a constant flood of interesting research progress in 2018, a recent reportputs things into perspective: “Quantum computing has been on Gartner’s hype list 11 times between 2000 and 2017, each time listed in the earliest stage of the hype cycle and each time said to be more than a decade away.” “Quantum computing has been on Gartner’s hype list 11 times between 2000 and 2017, each time listed in the earliest stage of the hype cycle and each time said to be more than a decade away.” This reminds me of early AI efforts, which began to heat up in the 1950’s, had limited but interesting success in the 1980’s and 1990’s, but only just started getting really mind-blowing circa 2010. Eric Elliottis the author of the books,“Composing Software”and“Programming JavaScript Applications”. As co-founder ofEricElliottJS.comandDevAnywhere.io, he teaches developers essential software development skills. He builds and advises development teams for crypto projects, and has contributed to software experiences forAdobe Systems, Zumba Fitness,The Wall StreetJournal,ESPN,BBC,and top recording artists includingUsher, Frank Ocean, Metallica,and many more. He enjoys a remote lifestyle with the most beautiful woman in the world. -- -- 36 Published inJavaScript Scene JavaScript, software leadership, software development, and related technologies. Written byEric Elliott Make some magic. #JavaScript Responses (36) Help Status About Careers Press Blog Privacy Terms Text to speech Teams",Eric Elliott,https://me.dm/@ericelliott,5814,10 min read,https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png|https://miro.medium.com/v2/resize:fill:88:88/1*VZfJFJj5oVmZ5WzlrgSmRg.jpeg|https://miro.medium.com/v2/resize:fill:48:48/1*fegbK6HDD8crwrwARuMhaQ.png|https://miro.medium.com/v2/resize:fill:96:96/1*fegbK6HDD8crwrwARuMhaQ.png|https://miro.medium.com/v2/resize:fill:128:128/1*fegbK6HDD8crwrwARuMhaQ.png|https://miro.medium.com/v2/resize:fill:96:96/1*VZfJFJj5oVmZ5WzlrgSmRg.jpeg|https://miro.medium.com/v2/resize:fill:128:128/1*VZfJFJj5oVmZ5WzlrgSmRg.jpeg
